1. create a program that prints your name to the screen
	output:
		Joe Doe

2. create a program that prints out the following
	output:
		Hello world!
		 (And all the people of the world)

3. create a program that counts how many seconds there are in a year. You can assume that a year consists of 365 days
   (therefore the eyar is not a leap year)
	output:
		There are X seconds in a year.

4. create a program that calculates the sum of two numbers. At the beginning of the program two variables are introduced
	and those variables hold the numbers to be summed.
	output: (if variables hold nubmers 5 and 4)
		5 + 4 = 9
		 
5. create a program that calculates the product of two numbers.
	output:
		2 * 8 = 16
		277 * 111 = 30747 

6. create a program that asks the user for two integers and then prints their sum
	output:
		Enter a number: 6
		Enter another number: 2

		Sum of the numbers: 8

7. create a program that asks the user for two integers and prints their quotient (including decimal part)
	output:
		Enter a number: 3
		Enter another number: 2

		Division: 3 / 2 = 1.5

8. The circumference of a circle is calculated using the formula 2 * pi * radius. Create a program that asks the user for the 
	radius and then calculates the circumference using the given radius. hint: Math.PI contains the value of PI
	output:
		Enter the radius: 20

		Circumference of the circle: 125.66370614359172

9. create a program that asks the user for two integers and then prints the larger of the two. (hint: use Math class)
	output:
		Enter a number: 20
		Enter another number: 14

		The bigger number of the two numbers given was: 20

10. create a program that prompts the user for a number and tells if the number is a positive number.
	 output:
		Enter a number: 5

		The number is positive.

		Enter a number: -2

		The number is not positive.

11. create a program that asks the user for a number and tells whether the number is even or odd.
	 output:
		Enter a number: 2
		Number 2 is even.

		Enter a number: 7
		Number 7 is odd.

12. create a program that asks the user for two numbers and prints the greater of those two. The program should
	 also handle the case in which the two numbers are equal.
	 output:
		Enter the first number: 5
		Enter the seccond number: 3

		Greater number: 5

		Enter the first number: 5
		Enter the second number: 8

		Greater number: 8

13. create a program that gives the course grade based on the following table.
	Points		Grade
	0-29			failed
	30-34			1
	35-39			2
	40-44			3
	45-49			4
	50-60			5

	output:
		Enter the points [0-60]: 37

		Grade: 2

14. create a program that recognizes the following users:
		username		password
		 alex			 mightyducks
		 emily		 cat
	 the  program should check for the username and password as follows:
	 output:
		Enter your username: alex
		Enter your password: mightyducks
		You are now logged into the system!

		Enter your username: emily
		Enter your password: dog
		Your username or password was invalid!

15. A year is a leap year if it is divisible by 4. But if the year is divisible by 100, it is a leap year only when it is also divisible by 400.
	 create a program that checks whether the given year is a leap year.
	 output:
		Enter a year: 2011
		The year is not a leap year.

		Enter a eyar: 2012
		The eyar is a leap year.

		Enter a year: 1800
		The year is not a leap year.

		Enter a year: 2000
		The year is a leap year.

16. create a program that aks the sue for a password. If the password is reight, a secret message is shown to the user.
	 output:
		Enter the password: turnip
		Wrong!	
		Enter the password: beetroot
		Wrong!
		Enter the password: carrot
		Right!

		The secret is: jryy qbar!

17. create a program that asks the user for three numbers and then prints their sum. Use the following strucuture in your program:
	Scanner reader = new Scanner(System.in);
	int sum = 0;
	int read;

	//program code goes here
	//use only variables sum, read, reader

	System.out.println("Sum: " + sum);

	output:
		Enter the first number: 3
		Enter the second number: 6
		Enter the third number: 12

		Sum: 21

18. create a program that reads numbers from the user and prints their sum. The program should stop asking for numbers when user enters the number 0.
	 the program should be structure like this:
		Scanner reader = new Scanner(System.in);
		int sum = 0;
		while (true) {
			int read = reader.nextInt();
			if(read == 0) break;
			// do something here
			System.out.println("Sum now: " + sum);
		}

		System.out.println("Sum in the end: " + sum);

19. create a program that prints the integers (whole numbers) from 1 to 100.
	 output:
	 1
	 2
	 (manu rows of numbers)
	 99
	 100

20. create a program that prints all even numbers between 2 and 100.
	 output:
		2
		4
		(many rows of numbers)
		98
		100

21. create a program that prints all whole numbers from 1 to the number the user enters.
	 output:
		Up to what number? 3
		1
		2
		3

22. create a program that asks the suer for t he first number and the last number and then prints all numbers between those two.
	 output:
		First: 5
		Last: 8
		5
		6
		7
		8
	 note: if the first number is greater than the last number, the program prints nothing

23. create a program that calculates the sum 1+2+3+...+n where n is a number entered by the user.
	 output:
		Until what? 3
		Sum is 6

		Until what? 7
		Sum is 28

24. create a program that calculates the factorial of the nubmer. The factorial n! is calculated using the formula 1*2*3*...*n.
	 Additionally, it is defined that 0! = 1.
	 output:
		Enter a number: 3
		Factorial is 6

25. create a program that calculates the sum of 2^0+2^1+2^2+...+2^n, where n is a number entered by the user.
	 note: you can use Math.pow() to calculate the power of a number (Math.pow returns a type double)
	 output:
		Enter a number: 3
		The result is 15

		Enter a number: 7
		The result is 255

26. create a program that asks the reader for numbers to enter and quits when the user enters -1 with the message "Thank you and see you later!".
	 the program should print the sum of the numbers entered by the user (excluding -1)
	 the program should count and print the number of integers entered
	 the program should print the average of the numbers
	 the program should print the number of even/odd numbers entered
	 output:
		Enter numbers:
		5
		2
		4
		-1
		Thank you and see you later!
		Sum: 11
		Count:  3
		Average: 3.6666666
		Even numbers: 2
		Odd numbers: 1

27. create a method 'printText' that prints the following string of characters: "In the beginning there were the swamp,
	 the hoe and Java." The program should prompt the user how many times the text should be printed
	 output:
		How many? 7

		In the beginning there were the swamp, the hoe and Java.
		In the beginning there were the swamp, the hoe and Java.
		In the beginning there were the swamp, the hoe and Java.
		In the beginning there were the swamp, the hoe and Java.
		In the beginning there were the swamp, the hoe and Java.
		In the beginning there were the swamp, the hoe and Java.
		In the beginning there were the swamp, the hoe and Java.

28. create a method 'printStars' that prints the given amount of stars and a line break.
	 create a method 'printSquare(int sideSize)' that prints a square using our previous method 'printStars'
	 create a method 'printRectangle(int width, int height)' that prints a rectangle using 'printStars'
	 create a method 'printTriangle(int size)' that prints a triangle using the 'printStars'
	 output:
		****
		****
		
		*
		**
		***

29. create a program where the user guesses a number (range 1-100), the user should have only 5 attempts.
	 hint: use Math.random() to generate random number
	 output:
		Guess a number: 73
		The number is lesser, guesses made: 1
		Guess a number: 22
		The number is greater, guesses made: 2
		Guess a number: 70
		Congratulations, your guess is correct!

30. create a method sum that calculates the sum of numbers the method receives as parameters.
	 output:
		sum: 14
		
31. create the method 'least', which returns the least of the numbers given as parameter. 

32. create a method 'greatest', which gets a list of integers as parameters and then returns the greatest of them.
	 output: (input: 2, 7, 3)
		Greatest: 7

33. create a method 'average' which calculates the average of the nubmers it gets as parameters. The method should use the helpe 'sum' method for its calculations.
	 output: (input: 4, 3, 6, 1)
		Average: 3.5

34. create a program that asks for the user's name and says how many characters the name contains.
	 the program should give the first character
	 the program should give the last character
	 the program should print the given name character's separately
	 the program should print the given name in reverse order
	 output:
		Enter your name: Joe Doe
		
		Number of characters: 7
		First character: J
		Last character: e
		Separately: J o e  D o e
		Reverse order: eoD eoJ

35. create a program that prints the first part of a word. The program asks the user for the word and length of the first part.
	 output:
		Enter a word: example
		Length of the first part: 4
		Result: exam

36. create a program that prints the end part of a word. The progam asks the user for thw word and the length of the end part.
	 output:
		Enter a word: example
		Length of the end part: 4
		Result: mple

37. create a method 'reverse' that puts the given string in reversed order.
	 output:
		Enter a text: example
		Reverse: elpmaxe

38. create a program that asks the user to input words until the user types in an empty String. The program prints the words the user gave.
	 If the word was already enter, warn the user ("you gave the word X twice."
	 output:
		Enter a word: carrot
		Enter a word: celery
		Enter a word: turnip
		Enter a word: rutabaga
		Enter a word: celery
		You gave the word celery twice.
		Enter a word:

39. create a program that asks the user to input words, until the user gives an empty string. The program will then print the words in reversed order, last word
	 printed first.
	 output:
		Enter a word: Mozart
		Enter a word: Schubert
		Enter a word: Bach
		Enter a word:

		You typed the following words:
		Bach
		Schubert
		Mozart

40. create a program that prompts the user for a list of words, util the empty string is entered. The program will then print the list in alphabetical order.
	 output:
		Enter a word: Mozart
		Enter a word: Bach
		Enter a word: Liszt

		You typed the following words:
		Bach
		Mozart
		Liszt

41. create a program with the methods 'sum' and 'average' that take an ArrayList<Integer> and returns their sum and average.
	 output:
		The sum: 14
		The average is: 3.5

42. create a method 'lengths' that gets a list of String variables as a parameter and returns an ArrayList that  contains the lengths of the Strings in the same
	 order as the original list. Create another method 'greatest', which receives a list of numbers as a parameter and then returns the greatest number in the
	 list as a return value.
	 output:
		The lengths of the Strings: [5, 3, 10, 27]
		The greatest number is: 27

43. create the method variance, which receives a list of two of more integers as a parameter and then returns the sample variance. 
	 output: (3, 2, 7, 2)
		The variance is: 5.666667

44. create the method 'moreThanOnce' that gets a list of integers and an integer as a parameter. If the number appears on the list more than once the
	 method returns true, otherwise false.
	 output:
		Enter list of integers: 3 2 7 2
		Enter a number: 2
		2 appears more than once.

		Enter a list of integers: 3 2 7 2
		Enter a number: 3
		3 does not appear more than once.

45. create the method 'palindrome' that checks if a string is a palindrome (reads the same forward and backward).
	 output:
		Enter text: madam
		The text is a palindrome!

		Enter text: example
		The text is not a palindrome!

46. create a method 'combine' that inserts the items from one list into another where the list can have duplicates.
	 create another method 'combineUnique' that inserts the items from one list into another but new items cannot repeat.
	 output:
		list1: [4, 3]
		list2: [5, 10, 7, 4, 3]

		combine: [4, 3, 5, 10, 7, 4, 3]
		uniqueCombine: [4, 3, 5, 10, 7]

47. create a class Product that represents a product sold in a webshop. A product has a price, amount, and name.
	 The class should have a constructor and toString method that prints a the product in the following form: Banana, price 1.1, amount 13
	 outpu:
		Products:
			banana, price 1.1, amount 13
			carrot, price 0.59, amount 7
			cherries, price 1.59, amount 11

48. create a class Counter that keeps a counter and has methods for increasing, decrease, setInitial, resetting, and getting the state of the counter. Counter
	 should never go below zero.
	 output:
		counter: 10
		counter: 9
		counter: 0
		counter: 100

49. create a class Menu that holds information about meals that are available in a cafeteria. The class should be able to print, clear, add entries to
	 the menu.
	 output:
		Menu:
			Humburger
			Fish 'n' Chips
			Sauerkraut

50. The University of Helsinki students use a so-called Lyyra cards to pay for their meals in student cafeterias. Implemet the class LyyraCard that
	 simulates the Lyyra card. Implement:
		-constructor that takes a starting balance
		-toString() that returns a string of the form "The card has X eurors"
		-payEconomical() that decreases the balance by 2.50 euros
		-payGourmet() that decrease the balance by 4.00 euros
			--if there's not enough balance the balance does not change (throw insufficient funds error)
		-deposit() that increases the balance by given amount; negatives values ignore
		-create a main method that creates a LyyraCard for Pekka and Brian with inital balances of 20 and 30 euros
			--Pekka buys gourmet lunch
			--Brian buys economical lunch
			--cards are printed (owner's name included)
			--Pekka loads 20 euros
			--Brian buys gourmet lunch
			--cars are printed
			--Pekka buys 2 economical lunch
			--Brian loads 50 euros
			--both cards are printed
	 output:
		Pekka: The card has 16.0 euros
		Brian: the card has 27.5 euros
		Pekka: The card has 36.0 euros
		Brian: the card has 23.5 euros
		Pekka: The card has 31.0 euros
		Brian: the card has 73.5 euros
		
51. create a class BoundedCounter with the following functionality:
	 -keeps the value with the range 0 to upper bound
	 -it starts at 0
	 -upper bound it given to the constructor
	 -next() to increment counter; if the upper bound is reach the next call to next() resets the counter to zero
	 -toString() returns a string representation of the counter value; if the value is less than 10 at a zero to the start
	 create a simple clock using the BoundedCounter that prints the time until the user terminates the program

52. create a class NumberStatistics with the following functionality:
	 -addEntry() adds a new number to the statistics
	 -size() tells us how many numbers have been added
	 -sum() returns sum of all added numbers(if no numbers, returns 0)
	 -average() returns the average of the added numbers(if no numbers, returns 0)
	 create a program that prompts the user to input numbers of type integer (-1 to end); the program stops and prints the number stats.
	 output:
		Enter numbers (-1 to end):
		4
		2
		5
		4
		-1

		count: 4
		sum: 15
		average: 3.75

53. create a class Dice that has the following functionality:
	 -constructor that takes in the number of sides
	 -roll() that tells the result of a roll
	 create a program that defines a dice of 6 sides and rolls 10 times.
	 output:
		roll: 6
		roll: 3
		roll: 5
		...

54. create a class PasswordRandomizer that has the following functionality:
	 -constructor which takes the length of generated password
	 -createPassword() that returns a new random pasword which consist of symbols a-zA-Z0-9!@$
	 output:
		Password 1: arHJXp_u%4wb
		Password 2: swLmDAYQRa_p
		Password 3: CGmOqyj@_$xy
		Password 4: %wG9hqW4npV5

55. create a LotteryNumbers class that draws lottery numbers of the week. The numbers of the week consist of 7 different numbers between 1 and 39, and the
	 following functionality:
	 -numbers() returns the drawn numbers of this draw
	 -drawNumbers() draws new numbers
	 -containsNumber() reveals if the number is amoung the drawn numbers

	output:
		Lottery numbers:
		3 5 10 14 15 27 37

		Lottery numbers:
		2 9 11 18 23 32 34

56. create a Counter class that holds a number that can be increased and decreased. The counter also has an optional check that prevents the counter
	 also has an optional check that prevents the counter from going below 0. The class has the following constructors:
	 -Counter(int startingValue, boolean check)
	 -Counter(int startingValue) creates a counter with checking off
	 -Counter(boolean check) creates a counter with starting value of 0
	 -Counter() creates a counter with value of 0 and checking off
	 and the following methods:
	 -value() returns the current value of the counter
	 -increase() increase counter by one
	 -decrease() decreases the value of counter by one, but no below zero if checking is on
	 -increase(int amount) increases the value by the amount; if amount is negative the value is ignore
	 -decrease(int amount) decrease the value by amount but not below zero if checking is on; if amount is negative the value is ignore

57. the information system of a housing service represents the apartments it has for sale using objects of the class Apartment. Create an
	 Apartment class with the following functionality:
	 -larger(Apartment) return true if the apartment is larger than the object is being compare to
	 -priceDifference(Apartment) return absolute value of the price difference
	 -moreExpensive(Apartment) return true if the apartment cost more

58. create a class Student that holds both a name and student number, then create a menu drive test program that allows to add students or print a list of
	 students in the format 'student_name (student_number)'
	 output:
		1 - Add Student
		2 - Print student list
		3 - Quit

		Enter choice: 1
	
	 	Enter student name: joe doe
	 	Enter student number: 013141590

		1 - Add Student
		2 - Print student list
		3 - Search
		4 - Quit

		Enter choice: 2

		joe doe (013141590)

		update: add search term menu option where the user can search for student(s) by given term

59. create a class Team with the following functionality:
	 -instance variable 'name'
	 -a constructor that sets the team name
	 -getName() that returns the name
	 -addPlayer() adds player to team; cannot add more than maxSize
	 -printPlayers() prints the players in the team
	 -size() returns the number of players in the team
	 -setMaxSize(int maxSize) sets the maximum number of players that team can have; default is 16
	 -goals() return the total number of goals for all the players in the team

	 create a class Player with the following functionality:
	 -instance variable 'name' and amount of goals
	 -two constructor; one to initialize name and another to initialize name and amount of goals
	 -getName() returns player's name
	 -goals() returns the number of goals
	 -toString() 

	output:
		Team: FC Barcelona
		Player: Brian, goals 0
		Player: Pekka, goals 39
		Number of players: 1
		Total goals: 40
